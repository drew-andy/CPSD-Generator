##This is the main code which generates a CPSD matrix. The Matrix can be manipulated to accomodate multiple control channels by changing the dimensions in line 48. 

import numpy as np
import matplotlib.pyplot as plt

# Adjust breakpoints here as necessary
breakpoints = [
    (15,  0.043),
    (74, 0.04),
    (300, 0.24),
    (1000, 0.24),
    (2000, 0.00064)]

frequency_resolution = 2  # Hz frequency spacing

breakpoints = np.array(breakpoints)
breakpoint_frequencies = breakpoints[:, 0]

# Generate frequency vector
frequency_vector = np.arange(breakpoint_frequencies[0],  # Start frequency
                             breakpoint_frequencies[-1] + frequency_resolution * 0.0001,  # Add a small offset
                             frequency_resolution)  # Frequency step

# Plot the breakpoints for reference
plt.figure()
plt.loglog(breakpoints[:, 0], breakpoints[:, 1])
plt.ylim(0.001, 0.1)
plt.xlim(10, 2000)
plt.title('Breakpoints')

# Interpolate on a log-log scale
log_frequency_vector = np.log(frequency_vector)
log_breakpoints = np.log(breakpoints)
log_specification = np.interp(log_frequency_vector,
                              log_breakpoints[:, 0],
                              log_breakpoints[:, 1])
specification = np.exp(log_specification)

# Plot interpolated specification
plt.figure()
plt.loglog(frequency_vector, specification, 'r.')
plt.title('Interpolated Specification')

# Shape the specification array for 3 control channels
specification = specification[:, np.newaxis, np.newaxis]  # nf x 1 x 1 to nf x 1 x 1

# Extend to 3 control channels
specification = np.tile(specification, (1, 3, 3))  # nf x 3 x 3

# Make CPSDs complex
specification = specification.astype(complex)

print('Specification Shape: {}'.format(specification.shape))

# Save CPSD for Rattlesnake
np.savez('rattlesnake2_specification.npz',
         f=frequency_vector,
         cpsd=specification)


